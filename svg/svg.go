package svg

import (
  core "github.com/jordan-bonecutter/purplecrayon/core"
  pc "github.com/jordan-bonecutter/purplecrayon"
  "fmt"
  "io"
)

// Register to purplecrayon
func init() {
  pc.Register("svg", NewSVGCanvas)
}

type svg struct {
  writer io.Writer
  width float64
  height float64
  objectCounter uint64
}

func (svg *svg) nextReference() core.Reference {
  defer func() {
    svg.objectCounter++
  }()
  return core.Reference(fmt.Sprintf("pcobj-%d", svg.objectCounter))
}

func topLevelClose() core.Reference {
  return ""
}

func (s *svg) WriteString(str string) {
  io.WriteString(s.writer, str)
}

// Creates a new canvas which draws to an svg via the given io.Writer
func NewSVGCanvas(width, height float64, writer io.Writer) (canvas pc.Canvas) {
  io.WriteString(writer, fmt.Sprintf(`<svg width="%f" height="%f" xmlns="http://www.w3.org/2000/svg">
  <!--Generated by PurpleCrayon-->`, width, height))

  root := &svg{
    writer: writer,
    width: width,
    height: height,
  }
  canvas = root

  return
}

func (s *svg) Close() core.Reference {
  io.WriteString(s.writer, "\n" + `</svg>`)
  return core.Reference("")
}

func (s *svg) Width() float64 {
  return s.width
}

func (s *svg) Height() float64 {
  return s.height
}

func (s *svg) Rect() pc.Rect {
  r := makeSvgRect(s)
  return &r
}

func (s *svg) Circle() pc.Circle {
  r := makeSvgCircle(s)
  return &r
}

func (s *svg) Cursor() pc.Cursor {
  r := makeSvgCursor(s)
  return r
}

